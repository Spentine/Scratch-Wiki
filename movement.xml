<title> Movement </title>

<h1> Movement </h1>

<p> The following are various movement scripts one may use to create a game. </p>

<p> Some scripts may require a script to record delta time. The below script may be used to calculate the current delta time. </p>

<pre class="blocks">

define delta time
reset timer
set [deltaTime v] to (0)
forever
change [deltaTime v] by (timer)
reset timer
end

</pre>

<p> The alternate script below can be used to keep track of an alternate timer. </p>

<pre class="blocks">

define delta time
reset timer
set [deltaTime v] to (0)
set [elapsedTime v] to (0)
forever
set [deltaTime v] to (timer)
change [elapsedTime v] by (timer)
reset timer
end

</pre>

<h2> Top Down </h2>

<h3> Basic </h3>

<h4> Constant FPS </h4>

<pre class="blocks">

when I receive [movement v]
forever
change x by ((speed :: grey) * (&lt;key (right arrow v) pressed?&gt; - &lt;key (left arrow v) pressed?&gt;))
change y by ((speed :: grey) * (&lt;key (up arrow v) pressed?&gt; - &lt;key (down arrow v) pressed?&gt;))
end

</pre>

<p> The <code class="b">(speed :: grey)</code> reporters may be substituted with the speed of the sprite in <i>pixels per frame</i>. </p>

<h4> Delta Time </h4>

<pre class="blocks">

when gf clicked
delta time :: custom

when I receive [movement v]
forever
change x by ((deltaTime) * ((speed :: grey) * (&lt;key (right arrow v) pressed?&gt; - &lt;key (left arrow v) pressed?&gt;)))
change y by ((deltaTime) * ((speed :: grey) * (&lt;key (up arrow v) pressed?&gt; - &lt;key (down arrow v) pressed?&gt;)))
end

</pre>

<p> The <code class="b">(speed :: grey)</code> reporters may be substituted with the speed of the sprite in <i>pixels per second</i>. </p>

<h3> Smooth </h3>

<h4> Constant FPS </h4>

<pre class="blocks">

when I receive [movement v]
set [xv v] to (0)
set [yv v] to (0)
forever
set [xv v] to (((drag :: grey) * (xv)) + ((acceleration :: grey) * (&lt;key (right arrow v) pressed?&gt; - &lt;key (left arrow v) pressed?&gt;)))
set [yv v] to (((drag :: grey) * (yv)) + ((acceleration :: grey) * (&lt;key (up arrow v) pressed?&gt; - &lt;key (down arrow v) pressed?&gt;)))
change x by (xv)
change y by (yv)
end

</pre>

<p> The <code class="b">(drag :: grey)</code> reporters may be substituted with the amount of drag, or slowing. The speed of the player on the next frame will be <code class="b">(drag :: grey)</code> times the speed on the previous frame. Some example values that may be useful include <code>0.9</code>, <code>0.8</code>, and <code>0.5</code>. The <code class="b">(acceleration :: grey)</code> reporters may be substituted by the amount of acceleration in <i>pixels per frame</i>. </p>